# {{ ansible_managed }}
services:

  rclone:
    build: rclone
    container_name: rclone
    volumes:
      - mounts:/etc/mounts
      - cache:/cache
      - /mnt:/mnt:shared
    env_file:
      - /root/vault-env
      - /root/rclone-env
    environment:
      - LOG_LEVEL={{ log_level }}
      - SERVER_URL=https://{{ inventory_hostname }}
      - USERS_CONFIG_PATH=/usr/local/etc
      - ADMIN_CONFIG_FILE=/etc/rclone.conf
      - CACHE_DIR=/cache
      - BASE_PATH=admin
    networks:
      - {{ traefik_docker_internal_network }}
    restart: unless-stopped
    devices:
      - /dev/fuse
    cap_add:
      - SYS_ADMIN
    security_opt:
      - apparmor:unconfined
    command: 
      - /bin/sh
      - -c
      - |
        RC_USER=admin
        RC_PASS=$$(cat /proc/sys/kernel/random/uuid)

        rclone --config=$$ADMIN_CONFIG_FILE rcd --rc-user=$$RC_USER --rc-pass=$$RC_PASS --rc-web-gui --rc-allow-origin $$SERVER_URL --rc-no-auth --rc-baseurl=$$BASE_PATH --rc-addr=0.0.0.0:5572 &
        
        cat << EOF > /etc/mounts/admin.conf

        # Exclude stats from PAM authentication
        location /$$BASE_PATH/core/stats {
          proxy_set_header Authorization "Basic $$(echo -n "$$RC_USER:$$RC_PASS" | base64)";
          proxy_pass http://rclone:5572;
        }

        include oidc.conf;

        location /$$BASE_PATH {  
          error_page 401 = @auth_401;

          auth_request /oidc/validate;

          auth_request_set \$$entitlements  \$$upstream_http_x_vouch_idp_claims_eduperson_entitlement;
          auth_request_set \$$uid  \$$upstream_http_x_vouch_idp_claims_uid;

          access_by_lua_block {
              entitlements = ngx.var.entitlements;
              if not entitlements or not entitlements:find("$$ADMIN_ACCESS_GROUP", 1, true) then
                  ngx.exit(ngx.HTTP_FORBIDDEN)
              end
          }

          # Selectively pass directly to rclone...
          location ~ ^/$$BASE_PATH(?!(/api|/swaggerui|/config/(dump|get|create|update|delete|listremotes))) { 
            proxy_set_header Authorization "Basic $$(echo -n "$$RC_USER:$$RC_PASS" | base64)";
            proxy_pass http://rclone:5572;
          }
        
          # Pass swagger endpoints
          location ~ ^/$$BASE_PATH(/api/config|/api/doc|/api/swagger.json|/swaggerui) { 
            proxy_pass http://rclone:80;
          }

          # These are the endpoints to intercept...
          location ~ ^/$$BASE_PATH/config/(dump|get|create|update|delete|listremotes) {  
            rewrite ^/$$BASE_PATH/config/(.*)\$$ /$$BASE_PATH/api/config/\$$1 break;
            proxy_pass http://rclone:80;
          }
        }

        EOF

        python app.py

  redis:
    image: redis
    container_name: redis
    networks:
      - internal

  mount:
    build: mount
    container_name: mount
    volumes:
      - mounts:/etc/mounts
      - ./mount.conf:/etc/nginx/conf.d/mount.conf:ro
      - ./oidc.conf:/etc/nginx/oidc.conf:ro
      - ./index.php:/var/www/html/index.php
    networks:
      - {{ traefik_docker_internal_network }}
      - {{ traefik_docker_external_network }}
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mount.rule=Host(`{{ inventory_hostname }}`) && (Path(`/`) || PathPrefix(`/admin`) || PathPrefix(`/webdav`))"
      - "traefik.http.routers.mount.tls=true"
      - "traefik.http.routers.mount.tls.certresolver=le"
      - "traefik.http.routers.mount.entrypoints=https"
      - "traefik.http.routers.mount.service=mount"
      - "traefik.http.services.mount.loadbalancer.server.port=80"


  php-fpm:
    image: php:8-fpm
    environment:
      - url=https://{{ inventory_hostname }}
    volumes:
      - mounts:/etc/mounts
      - ./index.php:/var/www/html/index.php
    networks:
      - {{ traefik_docker_internal_network }}
    
volumes:
  mounts:
  cache:

networks:
  {{ traefik_docker_external_network }}:
    external:
      name: {{ traefik_docker_external_network }}
  {{ traefik_docker_internal_network }}:
    external:
      name: {{ traefik_docker_internal_network }}
