---
- include_tasks: install.yml

- include_tasks: configure.yml

- name: Stop vault
  community.docker.docker_compose_v2:
    project_src: "{{ vault_directory }}"
    state: stopped
  register: output

- name: Delete vault file...
  file:
    state: absent
    path: "{{ vault_directory }}/file"
  when: vault_clean_data

- name: start vault
  community.docker.docker_compose_v2:
    project_src: "{{ vault_directory }}"
    state: present
  register: output

- name: Pause for 1 minute to wait for vault to be operational
  ansible.builtin.pause:
    minutes: 1

- name: Initialize vault
  command: "docker exec vault vault operator init -key-shares={{ vault_shares }} -key-threshold={{ vault_treshold }} -format json"
  register: vault_init_results
  ignore_errors: true

- name: Parse output of vault init
  set_fact:
    vault_init_parsed: "{{ vault_init_results.stdout | from_json }}"
  when: vault_init_results.failed == false

- name: Write unseal keys to files
  copy:
    dest: "{{ vault_master_secrets }}/unseal_key_{{ item.0 }}"
    content: "{{ item.1 }}"
    mode: 600
  with_indexed_items: "{{ vault_init_parsed.unseal_keys_hex }}"
  when: vault_init_results.failed == false

- name: Write root token to file
  copy:
    content: "{{ vault_init_parsed.root_token }}"
    dest: "{{ vault_master_secrets }}/rootkey"
    mode: 600
  when: vault_init_results.failed == false

- name: Reading unseal key contents
  command: "cat {{ vault_master_secrets }}/unseal_key_{{ item }}"
  register: unseal_keys
  with_sequence: start=1 end={{ vault_treshold }}

- name: Unseal vault
  command: "docker exec vault vault operator unseal {{ item.stdout }}"
  with_items: "{{ unseal_keys.results }}"
  ignore_errors: true
  register: output

- name: Reading root token
  command: "cat {{ vault_master_secrets }}/rootkey"
  register: root_token

- name: Set vault_token
  set_fact:
    vault_token: "{{ root_token.stdout }}"

- name: Enable secret engine...
  command: "docker exec -e VAULT_TOKEN={{ vault_token }} vault vault secrets enable -version=2 -path=secret kv"
  ignore_errors: true

- name: Enable userpass auth method...
  command: "docker exec -e VAULT_TOKEN={{ vault_token }} vault vault auth enable userpass"
  ignore_errors: true

- name: Check Vault health...
  uri:
    url: "https://{{ inventory_hostname }}/v1/sys/health"
    validate_certs: false
  register: health

- name: Show health...
  ansible.builtin.debug:
    msg: "{{ health }}"

- name: Create admin policy...
  uri:
    url: "https://{{ inventory_hostname }}/v1/sys/policy/admin"
    method: POST
    body: "{{ lookup('file','admin-policy.json') }}"
    body_format: json
    status_code: 204
    validate_certs: false
    headers:
      Content-Type: application/json
      X-Vault-Token: "{{ vault_token }}"

- name: create password for mount user
  set_fact:
    admin_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"

- name: Create admin user...
  uri:
    url: "https://{{ inventory_hostname }}/v1/auth/userpass/users/{{ admin_username }}"
    method: POST
    body: '{ "password": "{{ admin_password }}", "policies": "admin,default"}'
    body_format: json
    status_code: 204
    validate_certs: false
    headers:
      Content-Type: application/json
      X-Vault-Token: "{{ vault_token }}"

- name: Render env file
  template:
    src: vault-env.j2
    dest: "/root/vault-env"
    mode: 0600
